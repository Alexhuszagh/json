//  :copyright: (c) 2013-2017 Niels Lohmann <http://nlohmann.me>.
//  :copyright: (c) 2015-2017 The Regents of the University of California.
//  :license: MIT, see LICENSE.md for more details.
/*
 *  \addtogroup Tests
 *  \brief Test parsing RFC7419 JSON data.
 */

#include <json/reader.hpp>
#include <gtest/gtest.h>


// TESTS
// -----


TEST(Rfc7419, Unicode)
{
    auto TEST_STRING = [](const std::string &data, const std::string &expected) {
        json::StringTextReader reader(data);
        EXPECT_EQ(reader.value(), expected);
    };

    TEST_STRING("\"\\u005C\"", "\\");
    TEST_STRING("\"\\uD834\\uDD1E\"", "ùÑû");
    TEST_STRING("\"ùÑû\"", "ùÑû");
}


TEST(Rfc7419, Strings)
{
    auto TEST_STRING = [](const std::string &data, const std::string &expected) {
        json::StringTextReader reader(data);
        EXPECT_EQ(reader.value(), expected);
    };

    TEST_STRING("\"\"", "");
    TEST_STRING("\"Hello\"", "Hello");
    TEST_STRING("\"Hello\\nWorld\"", "Hello\nWorld");
    TEST_STRING("\"Hello\\u0000World\"", std::string("Hello\0World", 11));
    TEST_STRING("\"\\\"\\\\/\\b\\f\\n\\r\\t\"", "\"\\/\b\f\n\r\t");
    TEST_STRING("\"\\u0024\"", "\x24");
    TEST_STRING("\"\\u00A2\"", "\xC2\xA2");
    TEST_STRING("\"\\u20AC\"", "\xE2\x82\xAC");
    TEST_STRING("\"\\uD834\\uDD1E\"", "\xF0\x9D\x84\x9E");
}


TEST(Rfc7419, Doubles)
{
    auto TEST_DOUBLE = [](const std::string &data, const double expected) {
        json::StringTextReader reader(data);
        if (expected) {
            EXPECT_NEAR(reader.value<double>()/expected, 1, 1e-15);
        } else {
            // 0
            EXPECT_NEAR(reader.value<double>(), expected, 1e-15);
        }
    };

    TEST_DOUBLE("0.0", 0.0);
    TEST_DOUBLE("-0.0", -0.0);
    TEST_DOUBLE("1.0", 1.0);
    TEST_DOUBLE("-1.0", -1.0);
    TEST_DOUBLE("1.5", 1.5);
    TEST_DOUBLE("-1.5", -1.5);
    TEST_DOUBLE("3.1416", 3.1416);
    TEST_DOUBLE("1E10", 1E10);
    TEST_DOUBLE("1e10", 1e10);
    TEST_DOUBLE("1E+10", 1E+10);
    TEST_DOUBLE("1E-10", 1E-10);
    TEST_DOUBLE("-1E10", -1E10);
    TEST_DOUBLE("-1e10", -1e10);
    TEST_DOUBLE("-1E+10", -1E+10);
    TEST_DOUBLE("-1E-10", -1E-10);
    TEST_DOUBLE("1.234E+10", 1.234E+10);
    TEST_DOUBLE("1.234E-10", 1.234E-10);

    TEST_DOUBLE("0.999999999999999944488848768742172978818416595458984375", 1.0);
    TEST_DOUBLE("0.999999999999999944488848768742172978818416595458984374",
                0.99999999999999989);
    TEST_DOUBLE("0.999999999999999944488848768742172978818416595458984376", 1.0);
    TEST_DOUBLE("1.00000000000000011102230246251565404236316680908203125", 1.0);
    TEST_DOUBLE("1.00000000000000011102230246251565404236316680908203124", 1.0);
    TEST_DOUBLE("1.00000000000000011102230246251565404236316680908203126",
                1.00000000000000022);

    TEST_DOUBLE("72057594037927928.0", 72057594037927928.0);
    TEST_DOUBLE("72057594037927936.0", 72057594037927936.0);
    TEST_DOUBLE("72057594037927932.0", 72057594037927932.0);
    TEST_DOUBLE("7205759403792793199999e-5", 7205759403792793199999e-5);
    TEST_DOUBLE("7205759403792793200001e-5", 7205759403792793200001e-5);

    TEST_DOUBLE("9223372036854774784.0", 9223372036854774784.0);
    TEST_DOUBLE("9223372036854775808.0", 9223372036854775808.0);
    TEST_DOUBLE("9223372036854775296.0", 9223372036854775808.0);
    TEST_DOUBLE("922337203685477529599999e-5", 9223372036854774784.0);
    TEST_DOUBLE("922337203685477529600001e-5", 9223372036854775808.0);

    TEST_DOUBLE("10141204801825834086073718800384", 10141204801825834086073718800384.0);
    TEST_DOUBLE("10141204801825835211973625643008", 10141204801825835211973625643008.0);
    TEST_DOUBLE("10141204801825834649023672221696", 10141204801825835211973625643008.0);
    TEST_DOUBLE("1014120480182583464902367222169599999e-5", 10141204801825834086073718800384.0);
    TEST_DOUBLE("1014120480182583464902367222169600001e-5", 10141204801825835211973625643008.0);

    TEST_DOUBLE("5708990770823838890407843763683279797179383808", 5708990770823838890407843763683279797179383808.0);
    TEST_DOUBLE("5708990770823839524233143877797980545530986496", 5708990770823839524233143877797980545530986496.0);
    TEST_DOUBLE("5708990770823839207320493820740630171355185152", 5708990770823839524233143877797980545530986496.0);
    TEST_DOUBLE("5708990770823839207320493820740630171355185151999e-3", 5708990770823838890407843763683279797179383808.0);
    TEST_DOUBLE("5708990770823839207320493820740630171355185152001e-3", 5708990770823839524233143877797980545530986496.0);
}
